#!/usr/bin/perl

# Copyright (c) 2014 Brad J. Tarratt

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

do 'config.pl';

$tablelen = 1<<$tablebits;  # how many 8-bit samples in our table?
$tableprec = 32-$tablebits; # how many bits left over in skiplen for the fractional part?
$tablemult = 1<<$tableprec; # what I divide skiplen integer by to determine how many samples to jump
$ddsmax = 1<<$ddsbits;
$tablebitsminustwo = $tablebits - 2;

if ($tablebits > 13) {
  die "\$tablebits too high for available DRAM - must be 13 or less (see config.pl)\n";
  }

if ($realtimefreq) {
  if ($tablebits > 12) {
    die "\$tablebits too high to use realtime features - must be 12 or less (see config.pl)\n";
    }
  $defrealtimefreq = "#define REALTIMEFREQ";
  $cpucycles += 3;
} else {
  $defrealtimefreq = '';
  }

if ($amplitude) {
  $defamplitude = "#define AMPLITUDE";
  $cpucycles += 7; # 10 - 3 for normal LCBO to r30
  }

if ($realtimeamp) {
  if (!$amplitude) {
    die "\$realtimeamp requires \$amplitude\n";
    }
  $defrealtimeamp = "#define REALTIMEAMP";
  $cpucycles += 3;
  }

if ($ARGV[0] eq '_config_h') {

  $samprate = $clockrate / $cpucycles;
  $nyquist = $samprate / 2;

  printf "\n\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n";
  printf " * Current configuration allows for $samprate samples per second (nyquist $nyquist)  *\n";
  printf " * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n\n";

  open($configh, ">config.h");

  print $configh <<ECONFIGH;
// generated by config.pl
// modify the top of that file, not this one

#ifndef _CONFIG_H

#define TABLEBITS ($tablebits)
#define TABLEBITSMINUSTWO ($tablebitsminustwo)
#define CPUCYCLES ($cpucycles)
#define CLOCKRATE ($clockrate)
#define MAINPRUNUM ($mainprunum)
#define TABLELEN  ($tablelen) 
#define TABLEPREC ($tableprec)
#define TABLEMULT ($tablemult)
#define DDSBITS ($ddsbits)
#define DDSMAX ($ddsmax)
$defrealtimefreq
$defamplitude
$defrealtimeamp

#endif
ECONFIGH
  close ($configh);
}

#this is probably bad form ...

if ($ARGV[0] eq '_dts') {
  if ($graballpins) {
    open($dts, ">BB-BONE-PRUDDS-1-00A0.dts");
    print $dts <<EDTS0;
// generated by config.pl
// modify the top of that file, not this one
/dts-v1/;
/plugin/;

/ {
	compatible = "ti,beaglebone", "ti,beaglebone-black";

	/* identification */
	part-number = "BB-BONE-PRUDDS-1";
	version = "00A0";

	/* state the resources this cape uses */
	exclusive-use =
		/* the pin header uses */
		/* PRU1 */
		"P8.45",
		"P8.46",
		"P8.43",
		"P8.44",
		"P8.41",
		"P8.42",
		"P8.39",
		"P8.40",
		"P8.27",
		"P8.29",
		"P8.28",
		"P8.30",
		"P8.21",
		"P8.20",
		/* PRU0 */
		"P9.31",
		"P9.29",
		"P9.30",
		"P9.28",
		"P9.42",
		"P9.27",
		"P9.41",
		"P9.25",
		/* the hardware IP uses */
		"pru1",
		"pru0";

	fragment\@0 {
		target = <&am33xx_pinmux>;
		__overlay__ {

			pru_gpio_pins: pinmux_pru_gpio_pins {
				pinctrl-single,pins = <
		0x0a0 0x0f
		0x0a4 0x0f
		0x0a8 0x0f
		0x0ac 0x0f
		0x0b0 0x0f
		0x0b4 0x0f
		0x0b8 0x0f
		0x0bc 0x0f
		0x0e0 0x0f
		0x0e4 0x0f
		0x0e8 0x0f
		0x0ec 0x0f
		0x080 0x0f
		0x084 0x0f
		0x190 0x0f
		0x194 0x04
		0x198 0x0f
		0x19c 0x0f
		0x1a0 0x0f
		0x1a4 0x0f
		0x1a8 0x0f
		0x1ac 0x0f
				>;
			};

			pru_pru_pins: pinmux_pru_pru_pins {
				pinctrl-single,pins = <
		0x0a0 0x25
		0x0a4 0x25
		0x0a8 0x25
		0x0ac 0x25
		0x0b0 0x25
		0x0b4 0x25
		0x0b8 0x25
		0x0bc 0x25
		0x0e0 0x25
		0x0e4 0x25
		0x0e8 0x25
		0x0ec 0x25
		0x080 0x25
		0x084 0x25
		0x190 0x25
		0x194 0x25
		0x198 0x25
		0x19c 0x25
		0x1a0 0x25
		0x1a4 0x25
		0x1a8 0x25
		0x1ac 0x25
				>;
			};
		};	
	};

	fragment\@2 {
		target = <&pruss>;
		__overlay__ {
			status = "okay";

			pinctrl-names = "default";
			pinctrl-0 = <&pru_pru_pins>;
		};
	};
};
EDTS0
    
    exit(0);
    }
  if ($mainprunum == 0) {
    @resources = ("P9.31","P9.29","P9.30","P9.28","P9.42","P9.27","P9.41","P9.25");
    @pins = ("0x190","0x194","0x198","0x19c","0x1a0","0x1a4","0x1a8","0x1ac");
  } elsif ($mainprunum == 1) {
    @resources = ("P8.45","P8.46","P8.43","P8.44","P8.41","P8.42","P8.39","P8.40");
    @pins = ("0x0a0","0x0a4","0x0a8","0x0ac","0x0b0","0x0b4","0x0b8","0x0bc");
  } else {
    die "You have to choose a PRU, and 0 and 1 are the only valid choices.\n";
    }
  
  open($dts, ">BB-BONE-PRUDDS-1-00A0.dts");
print $dts <<EDTS1;
// generated by config.pl
// modify the top of that file, not this one
/dts-v1/;
/plugin/;

/ {
	compatible = "ti,beaglebone", "ti,beaglebone-black";

	/* identification */
	part-number = "BB-BONE-PRUDDS-1";
	version = "00A0";

	/* state the resources this cape uses */
	exclusive-use =
		/* the pin header uses */
EDTS1
for ($i=0; $i<$ddsbits; $i++) {
  print $dts "		\"$resources[$i]\",\n";
  }
print $dts <<EDTS2;
		/* the hardware IP uses */
		"pru0";

	fragment\@0 {
		target = <&am33xx_pinmux>;
		__overlay__ {

			pru_gpio_pins: pinmux_pru_gpio_pins {
				pinctrl-single,pins = <
EDTS2
for ($i=0; $i<$ddsbits; $i++) {
  print $dts "\t\t$pins[$i] 0x0f\n";
  }
print $dts <<EDTS3;
				>;
			};

			pru_pru_pins: pinmux_pru_pru_pins {
				pinctrl-single,pins = <
EDTS3
for ($i=0; $i<$ddsbits; $i++) {
  print $dts "\t\t$pins[$i] 0x25\n";
  }
print $dts <<EDTS4;
				>;
			};
		};	
	};

	fragment\@2 {
		target = <&pruss>;
		__overlay__ {
			status = "okay";

			pinctrl-names = "default";
			pinctrl-0 = <&pru_pru_pins>;
		};
	};
};
EDTS4
  close($dts);
}
